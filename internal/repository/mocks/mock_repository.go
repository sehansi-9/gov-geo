// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/neo4j_repo_interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/neo4j_repo_interface.go -destination=internal/repository/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "go-mysql-backend/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNeo4jRepo is a mock of Neo4jRepo interface.
type MockNeo4jRepo struct {
	ctrl     *gomock.Controller
	recorder *MockNeo4jRepoMockRecorder
	isgomock struct{}
}

// MockNeo4jRepoMockRecorder is the mock recorder for MockNeo4jRepo.
type MockNeo4jRepoMockRecorder struct {
	mock *MockNeo4jRepo
}

// NewMockNeo4jRepo creates a new mock instance.
func NewMockNeo4jRepo(ctrl *gomock.Controller) *MockNeo4jRepo {
	mock := &MockNeo4jRepo{ctrl: ctrl}
	mock.recorder = &MockNeo4jRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNeo4jRepo) EXPECT() *MockNeo4jRepoMockRecorder {
	return m.recorder
}

// GetMinistriesWithDepartments mocks base method.
func (m *MockNeo4jRepo) GetMinistriesWithDepartments() ([]models.MinistryWithDepartments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinistriesWithDepartments")
	ret0, _ := ret[0].([]models.MinistryWithDepartments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinistriesWithDepartments indicates an expected call of GetMinistriesWithDepartments.
func (mr *MockNeo4jRepoMockRecorder) GetMinistriesWithDepartments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinistriesWithDepartments", reflect.TypeOf((*MockNeo4jRepo)(nil).GetMinistriesWithDepartments))
}

// GetMinistryByIDWithDepartments mocks base method.
func (m *MockNeo4jRepo) GetMinistryByIDWithDepartments(id int) (models.MinistryWithDepartments, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinistryByIDWithDepartments", id)
	ret0, _ := ret[0].(models.MinistryWithDepartments)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinistryByIDWithDepartments indicates an expected call of GetMinistryByIDWithDepartments.
func (mr *MockNeo4jRepoMockRecorder) GetMinistryByIDWithDepartments(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinistryByIDWithDepartments", reflect.TypeOf((*MockNeo4jRepo)(nil).GetMinistryByIDWithDepartments), id)
}

// SeedDummyData mocks base method.
func (m *MockNeo4jRepo) SeedDummyData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedDummyData")
	ret0, _ := ret[0].(error)
	return ret0
}

// SeedDummyData indicates an expected call of SeedDummyData.
func (mr *MockNeo4jRepoMockRecorder) SeedDummyData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedDummyData", reflect.TypeOf((*MockNeo4jRepo)(nil).SeedDummyData))
}
